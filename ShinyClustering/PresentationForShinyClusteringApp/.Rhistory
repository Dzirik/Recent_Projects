plot(Xy$X1)
plot(Xy$X2)
plot(Xy$y)
SE <- coef(summary(reg))[, "Std. Error"]
cbind(coef(reg) - 1.96*SE, coef(reg 1.96*SE)
cbind(coef(reg) - 1.96*SE, coef(reg 1.96*SE)[,1]      [,2]
cbind(coef(reg) - 1.96*SE, coef(reg 1.96*SE))
cbind(coef(reg) - 1.96*SE, coef(reg 1.96)*SE)
cbind(coef(reg) - 1.96*SE, coef(reg 1.96)*SE)
cbind(coef(reg) - 1.96*SE, coef(reg)+ 1.96*SE)
confint(reg)
out <- summary(reg)
out
out$coefficients[ , 2]
reg<-lm(y~.,data=Xy)
se <- sqrt(diag(vcov(reg)))
se
source('~/.active-rstudio-document', echo=TRUE)
summary(reg)
reg<-lm(y~.,data=Xy)
se <- sqrt(diag(vcov(reg)))
se
boot(Xy,boot.fn,1000)
install.packages("boot")
boot(Xy,boot.fn,1000)
library(boot)
boot(Xy,boot.fn,1000)
?boot
load("F:/=PHD - IN DEPTH MACHINE LEARNING/Ch05 - Resampling Methods/R project/5.R.RData")
reg<-lm(y~.,data=Xy)
reg
matplot(Xy,type="l")
par(mfrow=c(3,1))
plot(Xy$X1)
plot(Xy$X2)
plot(Xy$y)
randomXy <- matrix( runif(3000, -1, 2), 1000, 3)
matplot(randomXy[, 1:2],type="l")
library(boot)
boot(Xy,boot.fn,1000)
? boot
reg<-lm(y~.,data=Xy)
reg$coefficients
coefficients(summary(reg))
reg$coefficients[2]
f <- function(data, indexes) {
reg <- lm(y ~ X1 + X2, data=data[indexes,])
beta1 <- reg$coefficients[2]
return(beta1)
}
reps <- boot(df, f, R=1000)
reps <- boot(Xy, f, R=1000)
reps
reps <- boot(Xy, f, R=1000)
reps <- boot(Xy, f, R=1000)
reps
? tsboot
f <- function(data, indexes) {
reg <- lm(y ~ X1 + X2, data=data[indexes,])
beta1 <- reg$coefficients[2]
return(beta1)
}
reps <- tsboot(Xy, f, R=1000)
reps
new.rows = c(101:200, 401:500, 101:200, 901:1000, 301:400, 1:100, 1:100, 801:900, 201:300, 701:800)
new.Xy = Xy[new.rows, ]
dim(new.Xy)
# Generate a block with 100 consecutive elements
get.block=function() {
s1 = sample(x=0:9,size=1)
s1 = s1 * 100
s2 = s1 + 100
s1 = s1 + 1
return (s1:s2)
}
# Generate 1 bootstrap sample
get.boot.sample=function() {
return (c(get.block(), get.block(),
get.block(), get.block(),
get.block(), get.block(),
get.block(), get.block(),
get.block(), get.block()))
}
# Fit model and return the std error of B1
alpha.fn=function(data, index) {
y.prime = data$y[index]
X1.prime = data$X1[index]
X2.prime = data$X2[index]
model.prime = lm(y.prime~X1.prime+X2.prime)
s.prime = summary(model.prime)
return (s.prime$coefficients["X1.prime","Std. Error"])
}
# Manual bootstrap (I got the same answer as when using boot())
se = 0
for (i in 1:1000) {
ix = get.boot.sample()
se = se + alpha.fn(Xy, ix)
}
# Average bootstrap results
se = se / 1000
print(se)
array(0,10)
?sd
get.block=function() {
s1 = sample(x=0:9,size=1)
s1 = s1 * 100
s2 = s1 + 100
s1 = s1 + 1
return (s1:s2)
}
# Generate 1 bootstrap sample
get.boot.sample=function() {
return (c(get.block(), get.block(),
get.block(), get.block(),
get.block(), get.block(),
get.block(), get.block(),
get.block(), get.block()))
}
# Fit model and return the std error of B1
alpha.fn=function(data, index) {
y.prime = data$y[index]
X1.prime = data$X1[index]
X2.prime = data$X2[index]
model.prime = lm(y.prime~X1.prime+X2.prime)
beta1 <- model.prime$coefficients[2]
return beta1
}
# Manual bootstrap (I got the same answer as when using boot())
beta_vec = array(0,1000)
for (i in 1:1000) {
beta_vec = get.boot.sample()
}
# Average bootstrap results
sd(beta_vec)
# Generate a block with 100 consecutive elements
get.block=function() {
s1 = sample(x=0:9,size=1)
s1 = s1 * 100
s2 = s1 + 100
s1 = s1 + 1
return (s1:s2)
}
# Generate 1 bootstrap sample
get.boot.sample=function() {
return (c(get.block(), get.block(),
get.block(), get.block(),
get.block(), get.block(),
get.block(), get.block(),
get.block(), get.block()))
}
# Fit model and return the std error of B1
alpha.fn=function(data, index) {
y.prime = data$y[index]
X1.prime = data$X1[index]
X2.prime = data$X2[index]
model.prime = lm(y.prime~X1.prime+X2.prime)
beta1 = model.prime$coefficients[2]
return (beta1)
}
# Manual bootstrap (I got the same answer as when using boot())
beta_vec = array(0,1000)
for (i in 1:1000) {
beta_vec = get.boot.sample()
}
# Average bootstrap results
sd(beta_vec)
beta_bec(1:100)
beta_vec(1:100)
beta_vec[1:10]
alpha.fn(Xy,1:1000)
# Manual bootstrap (I got the same answer as when using boot())
beta_vec = array(0,1000)
for (i in 1:1000) {
beta_vec[i] = get.boot.sample()
}
# Average bootstrap results
sd(beta_vec)
# Manual bootstrap (I got the same answer as when using boot())
beta_vec = array(0,1000)
for (i in 1:1000) {
ix = get.boot.sample()
beta_vec[i] = alpha.fn(Xy, ix)
}
# Average bootstrap results
sd(beta_vec)
? boot
library(boot)
f <- function(data, indexes) {
reg <- lm(y ~ X1 + X2, data=data[indexes,])
beta1 <- reg$coefficients[2]
return(beta1)
}
reps <- boot(Xy, f, R=1000)
reps
? normal
?nnorm
rnorm(1,mean=0,sd=1)
rnorm(1,mean=0,sd=1)
rnorm(1,mean=0,sd=1)
rnorm(10,mean=array(0,10),sd=)
rnorm(10,mean=array(0,10),sd=1)
rnorm(10,mean=array(0,2),sd=c(-5,5))
rnorm(2,mean=array(0,2),sd=c(-5,5))
array(0, 2)
c(-5, 5)
rnorm(1,mean=array(0,2),sd=c(-5,5))
rnomr(c(2,2))
rnorm(c(2,2))
rnorm(10,mean=array(0,10),sd=c(array(1,5),array(0,5)))
rnorm(10,mean=array(0,10),sd=c(array(1,10)))
rnorm(10,mean=c(array(1,5),array(0,5)),sd=c(array(1,10)))
rnorm(10,mean=c(array(10,5),array(0,5)),sd=c(array(1,10)))
rnorm(10,mean=c(array(0,5),array(0,5)),sd=c(array(1,10)))
rnorm(10,mean=c(array(1,5),array(0,5)),sd=c(array(1,10)))
Y<-array(0,100)
X<-array(0,c(100,10))
length(Y)
dim(X)
? for
Y<-array(0,100)
X<-array(0,c(100,10))
length(Y)
dim(X)
for (i in 1:50) {
Y[i]<-0
X[i,:]=rnorm(10,mean=c(array(0,5),array(0,5)),sd=c(array(1,10)))
Y[50+i]<-1
X[50+i,:]<-rnorm(10,mean=c(array(1,5),array(0,5)),sd=c(array(1,10)))
}
Y<-array(0,100)
X<-array(0,c(100,10))
length(Y)
dim(X)
for (i in 1:50) {
Y[i]<-0
X[i,]=rnorm(10,mean=c(array(0,5),array(0,5)),sd=c(array(1,10)))
Y[50+i]<-1
X[50+i,]<-rnorm(10,mean=c(array(1,5),array(0,5)),sd=c(array(1,10)))
}
dat=data.frame(X,Y=as.factor(Y))
dat[1:10,]
svmfit=svm(y~.,data=dat)
library(e1071)
svmfit=svm(y~.,data=dat)
svmfit=svm(Y~.,data=dat)
x<-rnorm(10,mean=c(array(0,5),array(0,5)),sd=c(array(1,10)))
predict(fit,x)
fit=svm(Y~.,data=dat)
predict(fit,x)
predict(fit,x)
data.frame(rnorm(10,mean=c(array(0,5),array(0,5)),sd=c(array(1,10))))
n<-200
Y<-array(0,2*n)
X<-array(0,c(2*n,10))
for (i in 1:n) {
#Y je 0
Ytest[i]<-0
Xtest<-rnorm(10,mean=c(array(0,5),array(0,5)),sd=c(array(1,10)))
#Y je 1
Ytest[50+i]<-1
xtest<-rnorm(10,mean=c(array(1,5),array(0,5)),sd=c(array(1,10)))
}
datTest=data.frame(Xtest,Ytest=as.factor(Y))
#error
n<-200
Ytest<-array(0,2*n)
Xtest<-array(0,c(2*n,10))
for (i in 1:n) {
#Y je 0
Ytest[i]<-0
Xtest<-rnorm(10,mean=c(array(0,5),array(0,5)),sd=c(array(1,10)))
#Y je 1
Ytest[50+i]<-1
xtest<-rnorm(10,mean=c(array(1,5),array(0,5)),sd=c(array(1,10)))
}
datTest=data.frame(Xtest,Ytest=as.factor(Y))
#error
n<-200
Ytest<-array(0,2*n)
Xtest<-array(0,c(2*n,10))
for (i in 1:n) {
#Y je 0
Ytest[i]<-0
Xtest<-rnorm(10,mean=c(array(0,5),array(0,5)),sd=c(array(1,10)))
#Y je 1
Ytest[50+i]<-1
Xtest<-rnorm(10,mean=c(array(1,5),array(0,5)),sd=c(array(1,10)))
}
datTest=data.frame(Xtest,Ytest=as.factor(Y))
pred<-predict(fit,Xtest)
pred<-predict(fit,datTest)
summary(datTest)
n<-200
Ytest<-array(0,2*n)
Xtest<-array(0,c(2*n,10))
for (i in 1:n) {
#Y je 0
Ytest[i]<-0
Xtest[i,]<-rnorm(10,mean=c(array(0,5),array(0,5)),sd=c(array(1,10)))
#Y je 1
Ytest[n+i]<-1
Xtest[n+i,]<-rnorm(10,mean=c(array(1,5),array(0,5)),sd=c(array(1,10)))
}
datTest=data.frame(Xtest,Ytest=as.factor(Y))
pred<-predict(fit,datTest)
pred(1:10)
pred[1:10]
sum(pred==Ytest)/(2*n)
pred!=Ytest
sum(pred!=Ytest)/(2*n)
#jedna
library(e1071)
opak<-1000
errOpak<-array(0,1000)
for(iter in 1:opak) {
Y<-array(0,100)
X<-array(0,c(100,10))
length(Y)
dim(X)
#data generating
for (i in 1:50) {
Y[i]<-0
X[i,]=rnorm(10,mean=c(array(0,5),array(0,5)),sd=c(array(1,10)))
Y[50+i]<-1
X[50+i,]<-rnorm(10,mean=c(array(1,5),array(0,5)),sd=c(array(1,10)))
}
dat=data.frame(X,Y=as.factor(Y))
#fit
fit=svm(Y~.,data=dat)
#error
n<-200
Ytest<-array(0,2*n)
Xtest<-array(0,c(2*n,10))
for (i in 1:n) {
#Y je 0
Ytest[i]<-0
Xtest[i,]<-rnorm(10,mean=c(array(0,5),array(0,5)),sd=c(array(1,10)))
#Y je 1
Ytest[n+i]<-1
Xtest[n+i,]<-rnorm(10,mean=c(array(1,5),array(0,5)),sd=c(array(1,10)))
}
datTest=data.frame(Xtest,Ytest=as.factor(Y))
pred<-predict(fit,datTest)
errOpak[iter]<-sum(pred!=Ytest)/(2*n)
}
#dva
#tri
mean(errOpak)
#jedna
library(e1071)
opak<-1000
errOpak<-array(0,1000)
for(iter in 1:opak) {
Y<-array(0,100)
X<-array(0,c(100,10))
length(Y)
dim(X)
#data generating
for (i in 1:50) {
Y[i]<-0
X[i,]=rnorm(10,mean=c(array(0,5),array(0,5)),sd=c(array(1,10)))
Y[50+i]<-1
X[50+i,]<-rnorm(10,mean=c(array(1,5),array(0,5)),sd=c(array(1,10)))
}
dat=data.frame(X,Y=as.factor(Y))
#fit
#fit=svm(Y~.,data=dat) #jedna
fit=svm(Y~.,data=dat,kernel = "linear") #dva
#error
n<-200
Ytest<-array(0,2*n)
Xtest<-array(0,c(2*n,10))
for (i in 1:n) {
#Y je 0
Ytest[i]<-0
Xtest[i,]<-rnorm(10,mean=c(array(0,5),array(0,5)),sd=c(array(1,10)))
#Y je 1
Ytest[n+i]<-1
Xtest[n+i,]<-rnorm(10,mean=c(array(1,5),array(0,5)),sd=c(array(1,10)))
}
datTest=data.frame(Xtest,Ytest=as.factor(Y))
pred<-predict(fit,datTest)
errOpak[iter]<-sum(pred!=Ytest)/(2*n)
}
#dva
#tri
mean(errOpak)
#jedna
library(e1071)
opak<-1000
errOpak<-array(0,1000)
for(iter in 1:opak) {
Y<-array(0,100)
X<-array(0,c(100,10))
length(Y)
dim(X)
#data generating
for (i in 1:50) {
Y[i]<-0
X[i,]=rnorm(10,mean=c(array(0,5),array(0,5)),sd=c(array(1,10)))
Y[50+i]<-1
X[50+i,]<-rnorm(10,mean=c(array(1,5),array(0,5)),sd=c(array(1,10)))
}
dat=data.frame(X,Y=as.factor(Y))
#fit
#fit=svm(Y~.,data=dat) #jedna
#fit=svm(Y~.,data=dat,kernel = "linear") #dva
fit<-glm(Y~.,data=dat,family = "binomial")
#error
n<-200
Ytest<-array(0,2*n)
Xtest<-array(0,c(2*n,10))
for (i in 1:n) {
#Y je 0
Ytest[i]<-0
Xtest[i,]<-rnorm(10,mean=c(array(0,5),array(0,5)),sd=c(array(1,10)))
#Y je 1
Ytest[n+i]<-1
Xtest[n+i,]<-rnorm(10,mean=c(array(1,5),array(0,5)),sd=c(array(1,10)))
}
datTest=data.frame(Xtest,Ytest=as.factor(Y))
pred<-predict(fit,datTest)
errOpak[iter]<-sum(pred!=Ytest)/(2*n)
}
mean(errOpak)
install.packages("rtools")
install.packages("Rtools")
library(Rtools)
install.packages("shiny")
library(shiny)
install.pakages("Rtools")
install.packages("Rtools")
library(Rtools)
setRepositories()
install.packages("Rcpp")
library(Rcpp)
shiny::runApp('R/09 Dev Data Products')
system.file("examples", package="shiny")
runExample("01_hello") # a histogram
runExample("02_text") # tables and data frames
runExample("04_mpg") # global variables
runExample("05_sliders") # slider bars
runExample("06_tabsets") # tabbed panels
runExample("08_html") # Shiny app built from HTML
runExample("09_upload") # file upload wizard
runExample("11_timer") # an automated timer
shiny::runApp('R/09 Dev Data Products')
shiny::runApp('R/09 Dev Data Products')
install.packages("UsingR")
shiny::runApp('R/09 Dev Data Products')
install.packages("formula")
install.packages("Formula")
shiny::runApp('R/09 Dev Data Products')
shiny::runApp('R/09 Dev Data Products')
runApp(displayMode='showcase')
runApp(displayMode="showcase")
shiny::runApp('R/09 Dev Data Products')
shiny::runApp('R/09 Dev Data Products')
shiny::runApp('R/09 Dev Data Products')
shiny::runApp('R/09 Dev Data Products')
shiny::runApp('R/09 Dev Data Products')
install.packages("formula")
install.packages("Formula")
Rscript -e "install.packages('Formula.zip',repos=NULL)"
setwd("~/")
Rscript -e "install.packages('Formula.zip',repos=NULL)"
install.packages('Formula.zip',repos=NULL)
Rscript -e "install.packages('Formula_1.2-1.zip',repos=NULL)"
install.packages('Formula_1.2-1.zip',repos=NULL)
shiny::runApp('R/09 Dev Data Products')
shiny::runApp('R/09 Dev Data Products')
shiny::runApp('R/09 Dev Data Products')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
library(rCharts)
require(rCharts)
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
data(airquality)
require(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
airquality
head(airquality)
shiny::runApp('R/09 Dev Data Products/ShinyClustering')
iris
shiny::runApp('R/09 Dev Data Products/ShinyClustering')
shiny::runApp('R/09 Dev Data Products/ShinyClustering')
library(Rtools)
install.packages(Rtools)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='dzirik', token='E8F01C5664612A4AAE347F8FD3FAD16B', secret='pL5ev/TwmCUoOwwBW1ORcPwM6RNoxBBJPVtqPceM')
setwd("~/R/09 Dev Data Products")
shinyapps::deployApp('ShinyClustering')
install_github('slidify','ramnathv')
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library('slidify')
setwd("~/R/09 Dev Data Products/SlidifyClustering")
author("DocumentationForShinyClusteringApp")
author("PresentationForShinyClusteringApp")
author      : Dzirik
